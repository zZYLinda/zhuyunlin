{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#这道题目用汉字来做加减法，刚开始有思路的就是如何把汉字转化为数字，我把他们分为几部分，第一类是0-9和100，\n",
    "#这几个比较特殊，我打算采用一个函数来完成，通过某种判断条件运行这个函数\n",
    "def a(a):#不含十的汉字转数字\n",
    "    if (a == '零'):\n",
    "        return 0\n",
    "    if (a == '一'):\n",
    "        return 1\n",
    "    if (a == '二'):\n",
    "        return 2\n",
    "    if (a == '三'):\n",
    "        return 3\n",
    "    if (a == '四'):\n",
    "        return 4\n",
    "    if (a == '五'):\n",
    "        return 5\n",
    "    if (a == '六'):\n",
    "        return 6\n",
    "    if (a == '七'):\n",
    "        return 7\n",
    "    if (a == '八'):\n",
    "        return 8\n",
    "    if (a == '九'):\n",
    "        return 9\n",
    "    if (a == '一百'):\n",
    "        return 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#第二类，就是都含有“十”这个字，所以我想到了用分离\n",
    "#我只需要提取出来十，以十为界限\n",
    "def b(b):#含十的汉字转文字\n",
    "    if (len(b)!=3):\n",
    "         if (b == '十'):\n",
    "            return 10\n",
    "         if (b == '二十'):\n",
    "            return 20\n",
    "         if (b == '三十'):\n",
    "            return 30\n",
    "         if (b == '四十'):\n",
    "            return 40\n",
    "         if (b == '五十'):\n",
    "            return 50\n",
    "         if (b == '六十'):\n",
    "            return 60\n",
    "         if (b == '七十'):\n",
    "            return 70\n",
    "         if (b == '八十'):\n",
    "            return 80\n",
    "         if (b == '九十'):\n",
    "            return 90\n",
    "    else:\n",
    "        a=b.split('十')\n",
    "        if (a[0] == '一'):\n",
    "            c=10\n",
    "        if (a[0] == '二'):\n",
    "            c=20\n",
    "        if (a[0] == '三'):\n",
    "            c=30\n",
    "        if (a[0] == '四'):\n",
    "            c=40\n",
    "        if (a[0] == '五'):\n",
    "            c=50\n",
    "        if (a[0] == '六'):\n",
    "            c=60\n",
    "        if (a[0] == '七'):\n",
    "            c=70\n",
    "        if (a[0] == '八'):\n",
    "            c=80\n",
    "        if (a[0] == '九'):\n",
    "            c=90\n",
    "        if (a[1] == '一'):\n",
    "            d=1\n",
    "        if (a[1] == '二'):\n",
    "            d=2\n",
    "        if (a[1] == '三'):\n",
    "            d=3\n",
    "        if (a[1] == '四'):\n",
    "            d=4\n",
    "        if (a[1] == '五'):\n",
    "            d=5\n",
    "        if (a[1] == '六'):\n",
    "            d=6\n",
    "        if (a[1] == '七'):\n",
    "            d=7\n",
    "        if (a[1] == '八'):\n",
    "            d=8\n",
    "        if (a[1] == '九'):\n",
    "            d=9\n",
    "        return c+d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#除了汉字转数字，查看时，也要用数字来转成汉字\n",
    "def c(a):#十以内数字转汉字\n",
    "    if (a == 0):\n",
    "        return '零'\n",
    "    if (a == 1):\n",
    "        return '一'\n",
    "    if (a == 2):\n",
    "        return '二'\n",
    "    if (a == 3):\n",
    "        return '三'\n",
    "    if (a == 4):\n",
    "        return '四'\n",
    "    if (a == 5):\n",
    "        return '五'\n",
    "    if (a == 6):\n",
    "        return '六'\n",
    "    if (a == 7):\n",
    "        return '七'\n",
    "    if (a == 8):\n",
    "        return '八'\n",
    "    if (a == 9):\n",
    "        return '九'\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def d(a):#十到一百的数字转汉字\n",
    "    if a%10==0:\n",
    "        if (a/10 == 1):\n",
    "            return '十'\n",
    "        if (a/10 == 2):\n",
    "            return '二十'\n",
    "        if (a/10 == 3):\n",
    "            return '三十'\n",
    "        if (a/10 == 4):\n",
    "            return '四十'\n",
    "        if (a/10 == 5):\n",
    "            return '五十'\n",
    "        if (a/10 == 6):\n",
    "            return '六十'\n",
    "        if (a/10 == 7):\n",
    "            return '七十'\n",
    "        if (a/10 == 8):\n",
    "            return '八十'\n",
    "        if (a/10 == 9):\n",
    "            return '九十'\n",
    "        if (a/10 == 10):\n",
    "            return '一百'\n",
    "    else:\n",
    "        b=a//10\n",
    "        c=a%10\n",
    "        if (b == 1):\n",
    "            e='十'\n",
    "        if (b == 2):\n",
    "            e = '二十'\n",
    "        if (b == 3):\n",
    "            e = '三十'\n",
    "        if (b == 4):\n",
    "            e = '四十'\n",
    "        if (b == 5):\n",
    "            e = '五十'\n",
    "        if (b == 6):\n",
    "            e = '六十'\n",
    "        if (b == 7):\n",
    "            e = '七十'\n",
    "        if (b == 8):\n",
    "            e = '八十'\n",
    "        if (b == 9):\n",
    "            e = '九十'\n",
    "        if (c == 1):\n",
    "            f = '一'\n",
    "        if (c == 2):\n",
    "            f = '二'\n",
    "        if (c == 3):\n",
    "            f = '三'\n",
    "        if (c == 4):\n",
    "            f = '四'\n",
    "        if (c == 5):\n",
    "            f = '五'\n",
    "        if (c == 6):\n",
    "            f = '六'\n",
    "        if (c == 7):\n",
    "            f = '七'\n",
    "        if (c == 8):\n",
    "            f = '八'\n",
    "        if (c == 9):\n",
    "            f = '九'\n",
    "        g=e+f\n",
    "        return g"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#输入一句话，就要去执行，我在开始函数中跳转了一个判断函数\n",
    "def e(str,a):#对最开始语句的判断来执行相应的函数\n",
    "    s=str.split(\" \")\n",
    "    if (len(s)<=2):\n",
    "        if (s[0]=='看看'):\n",
    "            kankanpan(str,a)\n",
    "        else:\n",
    "            print(\"命令不成立！\")\n",
    "    else:\n",
    "        if (s[2]=='等于'):\n",
    "            bianliang(str,a) \n",
    "        elif (s[1]=='增加'):\n",
    "            zengliang(s,a)\n",
    "        elif (s[1]=='减少'):\n",
    "            zengliang(s,a)\n",
    "        elif (s[0]=='如果'):\n",
    "            teshupan(str,a)\n",
    "        else:\n",
    "            print(\"命令不成立！\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def kankanpan(str,a):\n",
    "    s=str.split(\" \")\n",
    "    global h\n",
    "    if (h.find(s[1])==-1):#没有创建变量\n",
    "        print(\"没有创建相应的变量\")\n",
    "    else:#创建过变量\n",
    "        kankan(str,a)\n",
    "def kankan(str,a):#看看 (变量名)的输出判断\n",
    "    s=str.split(' ')\n",
    "    if (a[h.find(s[1])]>10):#若大于10则进行一种转换函数\n",
    "        print(d(a[h.find(s[1])]))\n",
    "    else:\n",
    "        print(c(a[h.find(s[1])]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bianliang(str,a):#为不同变量寻找相应位置\n",
    "    s=str.split(\" \")\n",
    "    global h\n",
    "    if (h.find(s[1])==-1):#没有创建变量\n",
    "        h=h+s[1]\n",
    "        chushi(str,a)\n",
    "    else:#创建过变量\n",
    "        chushi(str,a)\n",
    "def chushi(str,a):#初始化\n",
    "    s=str.split(' ')\n",
    "    if (len(s[3].split('十'))==1):#判定初始时是否含有'十'\n",
    "        a[h.find(s[1])]=a(s[3])\n",
    "    if(len(s[3].split('十'))==2):\n",
    "        a[h.find(s[1])]=b(s[3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def zengliang(s,a):\n",
    "    global h\n",
    "    if (h.find(s[0])==-1):#没有创建变量\n",
    "        print(\"没有创建相应的变量\")\n",
    "    else:#创建过变量\n",
    "        jiajian(s,a)\n",
    "def jiajian(s,a):#调用\n",
    "    a[h.find(s[0])]=fuhao(s,a)\n",
    "    \n",
    "def fuhao(s,a):#运算  百以内的加减\n",
    "    if (s[1] == '增加'):\n",
    "        if (len(s[2].split('十'))==1):#判断\n",
    "            return a[h.find(s[0])]+a(s[2])\n",
    "        if(len(s[2].split('十'))==2):\n",
    "            return a[h.find(s[0])]+b(s[2])\n",
    "    if (s[1] == '减少'):\n",
    "        if (len(s[2].split('十'))==1):#判断\n",
    "            return a[h.find(s[0])]-a(s[2])\n",
    "        if(len(s[2].split('十'))==2):\n",
    "            return a[h.find(s[0])]-b(s[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def teshupan(str,a):\n",
    "    s=str.split(\" \")\n",
    "    global h\n",
    "    if (h.find(s[1])==-1):#没有创建变量\n",
    "        print(\"没有创建相应的变量\")\n",
    "    else:#创建过变量\n",
    "        teshu(str,a)\n",
    "def teshu(str,a):#自定义判断语句\n",
    "    s=str.split(\" \")\n",
    "    if (s[2]=='大于'):\n",
    "        if (len(s[3].split('十'))==1):#判定初始时是否含有'十'\n",
    "            if(a[h.find(s[1])]>=a(s[3])):\n",
    "                if (s[5]=='看看'):\n",
    "                    q=s[6].replace('”','')\n",
    "                    q=q.replace('“','')\n",
    "                    print(q)\n",
    "                else:\n",
    "                    zengliang(s[5:8],a)\n",
    "            else:\n",
    "                if (s[5]=='看看'):\n",
    "                    q=s[9].replace('”','')\n",
    "                    q=q.replace('“','')\n",
    "                    print(q)\n",
    "                else:\n",
    "                    ptirnt(\"无\")\n",
    "        if(len(s[3].split('十'))==2):\n",
    "            if(a[h.find(s[1])]>=b(s[3])):\n",
    "                if (s[5]=='看看'):\n",
    "                    q=s[6].replace('”','')\n",
    "                    q=q.replace('“','')\n",
    "                    print(q)\n",
    "                else:\n",
    "                    zengliang(s[5:8],a)\n",
    "            else:\n",
    "                if (s[5]=='看看'):\n",
    "                    q=s[9].replace('”','')\n",
    "                    q=q.replace('“','')\n",
    "                    print(q)\n",
    "                else:\n",
    "                    ptirnt(\"无\")\n",
    "    if (s[2]=='小于'):\n",
    "        if (len(s[3].split('十'))==1):#判定初始时是否含有'十'\n",
    "            if(a[h.find(s[1])]<a(s[3])):\n",
    "                if (s[5]=='看看'):\n",
    "                    q=s[9].replace('”','')\n",
    "                    q=q.replace('“','')\n",
    "                    print(q)\n",
    "                else:\n",
    "                    zengliang(s[5:8],a)\n",
    "            else:\n",
    "                if (s[5]=='看看'):\n",
    "                    q=s[6].replace('”','')\n",
    "                    q=q.replace('“','')\n",
    "                    print(q)\n",
    "                else:\n",
    "                    ptirnt(\"无\")\n",
    "        if(len(s[3].split('十'))==2):\n",
    "            if(a[h.find(s[1])]<b(s[3])):\n",
    "                if (s[5]=='看看'):\n",
    "                    q=s[9].replace('”','')\n",
    "                    q=q.replace('“','')\n",
    "                    print(q)\n",
    "                else:\n",
    "                    zengliang(s[5:8],a)\n",
    "            else:\n",
    "                if (s[5]=='看看'):\n",
    "                    q=s[6].replace('”','')\n",
    "                    q=q.replace('“','')\n",
    "                    print(q)\n",
    "                else:\n",
    "                    ptirnt(\"无\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#之后想了很久才开始写主题函数，中间请教了田硕同学，写一个输入函数，由于案例二有两个需要同时使用，所以要写一个数组，用来存放不同的计算过程\n",
    "\n",
    "h=''#还要有一个字符串来存放变量名\n",
    "\n",
    "#我用一个无限while循环来输入，当输入结束的时候停止循环\n",
    "import numpy as np\n",
    "def star():\n",
    "    a =np.zeros(5)#数组，用于存储不同计算过程\n",
    "    while (1):\n",
    "        str = input(\"请输入：\");#循环输入指令，当输入的 结束 的时候结束循环\n",
    "        if (str=='结束'):\n",
    "            break;\n",
    "        else:\n",
    "            e(str,a)#此处跳转一个判断函数，用来执行输入语句\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
